// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6UQ1FZXCaknS54fB1poabC
// Component: lQ6tGVWi-__D
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: -SOUtOCL8mW/component

import { useScreenVariants as useScreenVariants_4HwNTit1NeFh } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 4hw_nTIT1NeFh/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss

import "./plasmic_test_123.css"; // plasmic-import: 6UQ1FZXCaknS54fB1poabC/projectcss
import "./PlasmicHomepage.css"; // plasmic-import: lQ6tGVWi-__D/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: ZlvI9KYyRW1/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: ae-780J4JaB/icon
import imageRtlobGj7Lkc from "./images/image.svg"; // plasmic-import: RtlobGj7lkc/picture

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  content?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>("content");

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  logo?: p.Flex<"a">;
  img?: p.Flex<typeof p.PlasmicImg>;
  services?: p.Flex<typeof Button>;
  features?: p.Flex<typeof Button>;
  company?: p.Flex<typeof Button>;
  contact?: p.Flex<typeof Button>;
  login?: p.Flex<typeof Button>;
  signup?: p.Flex<typeof Button>;
  content?: p.Flex<"div">;
};

export interface DefaultHomepageProps {
  content?: React.ReactNode;
  className?: string;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_4HwNTit1NeFh()
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={"plasmic_page_wrapper"}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "root_reset_6UQ1FZXCaknS54fB1poabC",
            "plasmic_default_styles",
            "plasmic_mixins",
            "Homepage__root__rPAgg"
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(
              "plasmic_default__all",
              "plasmic_default__div",
              "Homepage__freeBox__did5G"
            )}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "Homepage__freeBox__x2Nf9"
              )}
            >
              <a
                data-plasmic-name={"logo"}
                data-plasmic-override={overrides.logo}
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__a",
                  "Homepage__logo__nebMl"
                )}
              >
                <p.PlasmicImg
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames("Homepage__img__ery6T")}
                  displayHeight={"40px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"40px" as const}
                  src={{
                    src: imageRtlobGj7Lkc,
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />
              </a>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__div",
                  "Homepage__freeBox__iRJb9"
                )}
              >
                <Button
                  data-plasmic-name={"services"}
                  data-plasmic-override={overrides.services}
                  className={classNames(
                    "__wab_instance",
                    "Homepage__services__fzldG"
                  )}
                  color={"clear" as const}
                >
                  <div
                    className={classNames(
                      "plasmic_default__all",
                      "plasmic_default__div",
                      "__wab_text",
                      "Homepage__text___1RnN"
                    )}
                  >
                    {"Services"}
                  </div>
                </Button>

                <Button
                  data-plasmic-name={"features"}
                  data-plasmic-override={overrides.features}
                  className={classNames(
                    "__wab_instance",
                    "Homepage__features__ljUho"
                  )}
                  color={"clear" as const}
                >
                  <div
                    className={classNames(
                      "plasmic_default__all",
                      "plasmic_default__div",
                      "__wab_text",
                      "Homepage__text__ixKnF"
                    )}
                  >
                    {"Features"}
                  </div>
                </Button>

                <Button
                  data-plasmic-name={"company"}
                  data-plasmic-override={overrides.company}
                  className={classNames(
                    "__wab_instance",
                    "Homepage__company___44Crg"
                  )}
                  color={"clear" as const}
                >
                  <div
                    className={classNames(
                      "plasmic_default__all",
                      "plasmic_default__div",
                      "__wab_text",
                      "Homepage__text___7NnIv"
                    )}
                  >
                    {"Company"}
                  </div>
                </Button>

                <Button
                  data-plasmic-name={"contact"}
                  data-plasmic-override={overrides.contact}
                  className={classNames(
                    "__wab_instance",
                    "Homepage__contact___1L0GE"
                  )}
                  color={"clear" as const}
                >
                  <div
                    className={classNames(
                      "plasmic_default__all",
                      "plasmic_default__div",
                      "__wab_text",
                      "Homepage__text___8Ploq"
                    )}
                  >
                    {"Contact"}
                  </div>
                </Button>

                <Button
                  data-plasmic-name={"login"}
                  data-plasmic-override={overrides.login}
                  className={classNames(
                    "__wab_instance",
                    "Homepage__login___0SoE"
                  )}
                  color={"clear" as const}
                >
                  <div
                    className={classNames(
                      "plasmic_default__all",
                      "plasmic_default__div",
                      "__wab_text",
                      "Homepage__text__tFzM"
                    )}
                  >
                    {"Log in"}
                  </div>
                </Button>

                <Button
                  data-plasmic-name={"signup"}
                  data-plasmic-override={overrides.signup}
                  className={classNames(
                    "__wab_instance",
                    "Homepage__signup__cr3Ri"
                  )}
                >
                  <div
                    className={classNames(
                      "plasmic_default__all",
                      "plasmic_default__div",
                      "__wab_text",
                      "Homepage__text__kjPj9"
                    )}
                  >
                    {"Sign up"}
                  </div>
                </Button>
              </p.Stack>

              {false ? (
                <div
                  className={classNames(
                    "plasmic_default__all",
                    "plasmic_default__div",
                    "Homepage__freeBox__tyElN"
                  )}
                >
                  <button
                    className={classNames(
                      "plasmic_default__all",
                      "plasmic_default__button",
                      "__wab_text",
                      "Homepage__button__eMyT"
                    )}
                  >
                    {"Sign up"}
                  </button>

                  {true ? (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        "Homepage__button__cvLCj"
                      )}
                      color={"clear" as const}
                    >
                      <div
                        className={classNames(
                          "plasmic_default__all",
                          "plasmic_default__div",
                          "__wab_text",
                          "Homepage__text__nnxF"
                        )}
                      >
                        {"Log in"}
                      </div>
                    </Button>
                  ) : null}
                </div>
              ) : null}
            </p.Stack>
          </p.Stack>

          {true ? (
            <div
              data-plasmic-name={"content"}
              data-plasmic-override={overrides.content}
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "Homepage__content__pJhoR"
              )}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <h1
                      className={classNames(
                        "plasmic_default__all",
                        "plasmic_default__h1",
                        "__wab_text",
                        "Homepage__h1__bMjOd"
                      )}
                    >
                      {"Welcome to your first page."}
                    </h1>

                    <div
                      className={classNames(
                        "plasmic_default__all",
                        "plasmic_default__div",
                        "__wab_text",
                        "Homepage__text___42GxB"
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "If you haven't already done so, go back and learn the basics by going through the Plasmic Levels tutorial.\n\nIt's always easier to start from examples! Add a new page using a template—do this from the list of pages in the top left (the gray + button).\n\nOr press the big blue + button to start dragging items into this page.\n\nIntegrate this project into your codebase—press the "
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Code"}
                        </span>
                        <React.Fragment>
                          {
                            " button in the top right and follow the quickstart instructions.\n\nJoin our Slack community (icon in bottom left) for help any time."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </React.Fragment>
                ),
                value: args.content
              })}
            </div>
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "logo",
    "img",
    "services",
    "features",
    "company",
    "contact",
    "login",
    "signup",
    "content"
  ],
  logo: ["logo", "img"],
  img: ["img"],
  services: ["services"],
  features: ["features"],
  company: ["company"],
  contact: ["contact"],
  login: ["login"],
  signup: ["signup"],
  content: ["content"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  logo: "a";
  img: typeof p.PlasmicImg;
  services: typeof Button;
  features: typeof Button;
  company: typeof Button;
  contact: typeof Button;
  login: typeof Button;
  signup: typeof Button;
  content: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    img: makeNodeComponent("img"),
    services: makeNodeComponent("services"),
    features: makeNodeComponent("features"),
    company: makeNodeComponent("company"),
    contact: makeNodeComponent("contact"),
    login: makeNodeComponent("login"),
    signup: makeNodeComponent("signup"),
    content: makeNodeComponent("content"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
